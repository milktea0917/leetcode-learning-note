# version 1

# This code is based on the work of Rahul Varma. (https://leetcode.com/rahulvarma5297/)
# Linked list, Head pointer, Tail pointer

class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:

        """
        Although it may seem trivial to include these in learning notes, I believe it is a good habit to know where to start, especially when solving problems in unfamiliar classes.
        1. Know what the data looks like
        2. Know the data's type
        3. If the data is a custom class, know its associated functions.
        """
        # print(l1) # ListNode{val: 2, next: ListNode{val: 4, next: ListNode{val: 3, next: None}}}
        # print(type(l1)) # <class 'precompiled.listnode.ListNode'>
        # print(dir(l1)) 
        # ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__',
        #  '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__',
        #  '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__',
        #  '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__',
        #  '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__',
        #  '_array_to_list_node', '_list_node_to_array', 'deserialize', 'has_cycle', 'next', 'serialize', 'val']

        # initialization
        """
        initial explanation:
        1. result_head_pointer: where the linked list starts
        2. result_tail_pointer: where the linked list ends
        3. carry: when adding two digits, used to store the carry
        4. Now, the initial result's head and tail pointers both point to the same 'Linked List'.
        """
        result_head_pointer = ListNode(0)
        result_tail_pointer = result_head_pointer
        carry = 0

        """
        stop criteria explanation :
        1. l1 is not None or l2 is not None: Because we go shifting in the while loop, we need to know when those two linked lists stop.
        2. carry != 0: If a carry exists, but we don't need to add two digits, we still need to add a new node for the carry.
        """
        while l1 is not None or l2 is not None or carry != 0: # stop criteria
            digit1 = l1.val if l1 is not None else 0
            digit2 = l2.val if l2 is not None else 0

            # get digit and carry 
            sum = digit1 + digit2 + carry
            digit = sum % 10
            carry = sum // 10

            # the most important part
            """
            new_node = ListNode(digit): Create a new node by initializing the value with a digit, |digit|None|
            result_tail_pointer.next = new_node: Add this new node at the back of final return linked list
            """
            new_node = ListNode(digit)
            result_tail_pointer.next = new_node 

            # shift node pointer
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
            result_tail_pointer = result_tail_pointer.next # shift the result_tail_pointer to last node

        """
        explanation for final:
        result = result_head_pointer.next: Since we initialize the result_head_pointer with 0, we have an extra node for the final answer. 
        result_head_pointer.next = None: I don't really understand the meaning of this line, but it surely speeds up the runtime.
        """
        result = result_head_pointer.next
        result_head_pointer.next = None

        return result

