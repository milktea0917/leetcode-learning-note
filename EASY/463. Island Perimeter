class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        
        rows, cols = len(grid), len(grid[0])

        def dfs( r, c):

            # r < 0 / c < 0 / r >= rows / c >= cols： means "out of boundary"
            # grid[r][c] == 0： water, perimeter += 1
            if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == 0:
                return 1 

            # grid[r][c] == -1： land, by pass(return 0)
            if grid[r][c] == -1:
                return 0

            # grid[r][c] = -1：means this is land
            grid[r][c] = -1
            
            # seek for the near by four blocks
            return ( dfs(r+1, c) +
                     dfs(r-1, c) +
                     dfs(r, c+1) +
                     dfs(r, c-1) )

        final_return = 0
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == 1:
                     final_return += dfs(r,c)
        return final_return 
